@inherits LayoutComponentBase
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.Buttons

@*<SfToolbar Height="52px">
    <ToolbarItems>
        <ToolbarItem Text="Toogle" Align="ItemAlign.Left">
            <Template>
                <SfButton IconCss="oi oi-menu" IconPosition="IconPosition.Right" @onclick="SideBarToggle"></SfButton>
            </Template>
        </ToolbarItem>
        <ToolbarItem Text="Toogle" Align="ItemAlign.Right">
            <Template>
                <SfButton @ref="ThemeToggler" IconCss="@themeIconClass" IconPosition="IconPosition.Right" IsToggle="true" @onclick="ThemeToggle">
                </SfButton>
            </Template>
        </ToolbarItem>
        <ToolbarItem Text=@($"IsOpen = {@IsSidebarOpen.ToString()}") Align="ItemAlign.Right"></ToolbarItem>
        <ToolbarItem Text=@($"IsDark = {IsThemeDark.ToString()}") Align="ItemAlign.Right"></ToolbarItem>
    </ToolbarItems>
</SfToolbar>
*@

<div id="toolbar">
    <button id="toolbar-menu-button" @onclick="@SideBarToggle"><span class="oi oi-menu"></span></button>
</div>

<SfSidebar @ref="@sidebarObj" Type="SidebarType.Over" @bind-IsOpen="IsSidebarOpen"
           EnablePersistence="false" CloseOnDocumentClick="false" ShowBackdrop="false"
           EnableGestures="true" MediaQuery="(min-width: 600px)">
    <ChildContent>
        <div>
            <div style="display:flex; height:52px; justify-content:left; align-content:center">
                <SfButton IconCss="oi oi-menu" IconPosition="IconPosition.Right" @onclick="SideBarToggle">
                </SfButton>
            </div>
                <div style="display:flex; justify-content:center; align-content:center;">
                    <img height="120" width="240" src="images/lights.jpg" />
                </div>
            <NavigationMenu></NavigationMenu>
        </div>
    </ChildContent>
</SfSidebar>

<div style="text-align: center; width:auto; height:92vh">
    @Body
</div>

<style>
    :root {
        --sidebar-width: 250px;
        --toolbar-height: 52px;
    }
    #toolbar{
        display:flex;
        background: crimson;
        border: none;
        color: white;
        height:var(--toolbar-height);
        width: 100vw;
        box-shadow: 0 3px 5px rgba(0, 0, 0, .25);
    }
    #toolbar-menu-button{
        justify-self:center;
        background:none; 
        border:none;
        color:white;
        margin-left:8px;
    }

    .e-toolbar {
        z-index: 1000;
        background-color: #566575;
        box-shadow: 0 3px 5px rgba(0, 0, 0, .25);
    }

        .e-toolbar .e-toolbar-items {
            background-color: transparent;
            height: var(--toolbar-height) !important;
        }

        .e-toolbar .e-tbar-btn {
            background: transparent;
            color: #ffffff;
        }

    .e-btn, .e-css.e-btn {
        background-color: transparent;
    }


    .e-sidebar {
        color: black;
        background-color: slategray;
        height: 100vh;
        width: var(--sidebar-width) !important;
    }

    .text-content {
        font-size: 1.5rem;
        padding: 3rem;
    }

    .main > div {
        padding: 0px !important;
    }
</style>

@code {
    SfSidebar? sidebarObj;
    SfButton? ThemeToggler;
    public bool IsSidebarOpen = false;
    string themeIconClass = "oi oi-sun";

    [CascadingParameter]
    public bool IsThemeDark { get; set; } = false;

    protected override void OnInitialized()
    {
        //#if DEBUG
        //    Thread.Sleep(6000);
        //#endif
    }

    public void SideBarToggle()
    {
        IsSidebarOpen = !IsSidebarOpen;
    }
    public void ThemeToggle()
    {
        IsThemeDark = !IsThemeDark;
        themeIconClass = GetThemeIcon(IsThemeDark);
    }
    private string GetThemeIcon(bool isDark)
    {
        if (isDark) return "oi oi-moon";
        else return "oi oi-sun";
    }
}